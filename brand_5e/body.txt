# returns a spell description in an indented quote block
def makespell(name, level, school, casting_time, spell_range, components, duration, classes, effect, higher_levels):
    spell = "\\begin{quote}" + bold(name) + NEWLINE + italics(format_index(int(level)) + "-level " + school.lower()) + NEWLINE
    spell += bold("Casting Time: ") + casting_time + NEWLINE
    spell += bold("Range: ") + spell_range + NEWLINE
    spell += bold("Components: ") + components + NEWLINE
    spell += bold("Duration: ") + duration + NEWLINE
    spell += bold("Classes: ") + classes + NEWLINE
    spell += effect + NEWLINE
    spell += bolditalics("At Higher Levels: ") + higher_levels
    return spell + "\\end{quote}"


# returns CR with XP value
def cr(cr):
    return str(cr) + " (" + CR_TO_XP[cr] + " XP)"


# returns in the form of "DC challenge Ability (Skill) check"
def check(dc, *skill):
    skill = _separate(skill)
    return "DC " + str(dc) + " " + ABILITIES_SPELLOUT[SKILL_ABILITY[skill]] + " (" + SKILL_PRETTYNAME[skill] + ") check"


# similar to the save function, but with a skill
def opposedcheck(ability, abilitybonus, profbonus):
    dc = 8 + abilitybonus + profbonus
    ability_name = ""
    if ability != "w/none":
        ability_name = ABILITIES_SPELLOUT[ability[2:]] + " "
    return "DC " + str(dc) + " " + ability_name + "check"


# returns in the form of "DC challenge Ability saving throw"
def save(ability, abilitybonus, profbonus):
    dc = 8 + abilitybonus + profbonus
    ability_name = ""
    if ability != "w/none":
        ability_name = ABILITIES_SPELLOUT[ability[2:]] + " "
    return "DC " + str(dc) + " " + ability_name + "saving throw"


# returns in the form of "DC challenge Ability saving throw"
def basicsave(ability, difficulty):
    ability_name = ""
    if ability != "w/none":
        ability_name = ABILITIES_SPELLOUT[ability[2:]] + " "
    return "DC " + str(difficulty) + " " + ability_name + "saving throw"


def _score_to_bonus(score):
    return floor(score / 2) - 5


# returns in the form of "score (bonus)"
def stat(score):
    return str(score) + " (" + format_bonus(_score_to_bonus(score)) + ")"